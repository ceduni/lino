name: Flutter Build APK

on:
  workflow_dispatch:  # Only allow manual trigger
    inputs:
      version_tag:
        description: 'Version tag (e.g., 1.2.3456)'
        required: true
        type: string
      include_patch_notes:
        description: 'Include PATCH_NOTES.md file in release description'
        required: false
        type: boolean
        default: true

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '21'  
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.5'
        channel: 'stable'
        
    - name: Get dependencies
      working-directory: ./app
      run: flutter pub get
  
    - name: Create local.properties
      working-directory: ./app/android
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        echo "flutter.sdk=$FLUTTER_ROOT" >> local.properties
        echo "googleApiKey=${{ secrets.GOOGLE_API_KEY }}" >> local.properties
        echo "imgbbApiKey=${{ secrets.IMGBB_API_KEY }}" >> local.properties
      
    - name: Create .env file
      working-directory: ./app
      run: |
        echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" > .env
        echo "IMGBB_API_KEY=${{ secrets.IMGBB_API_KEY }}" >> .env
        echo "BOOK_MANIPULATION_TOKEN=${{ secrets.BOOK_MANIPULATION_TOKEN }}" >> .env

    # - name: Run tests (optional)
    #   working-directory: ./app
    #   run: flutter test

    - name: Create keystore
      working-directory: ./app
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > upload-keystore.jks
        
    - name: Create key.properties
      working-directory: ./app/android
      run: |
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > key.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> key.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> key.properties
        echo "storeFile=../../upload-keystore.jks" >> key.properties
      
    - name: Build APK
      working-directory: ./app
      run: flutter build apk --release
      
    - name: Get commit message
      id: commit
      run: echo "message=$(git log --format=%B -n 1 ${{ github.sha }} | head -n 1)" >> $GITHUB_OUTPUT
      
    - name: Set version tag
      id: version
      run: echo "tag=${{ github.event.inputs.version_tag }}" >> $GITHUB_OUTPUT
        
    - name: Set build date
      id: build_date
      run: echo "date=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_OUTPUT
      
    - name: Read patch notes
      id: patch_notes
      if: github.event.inputs.include_patch_notes == 'true'
      run: |
        if [ -f "PATCH_NOTES.md" ]; then
          # Encode content to base64 to avoid multiline issues
          CONTENT=$(base64 -w 0 PATCH_NOTES.md)
          echo "content_base64=$CONTENT" >> $GITHUB_OUTPUT
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Decode patch notes
      id: decoded_notes
      if: github.event.inputs.include_patch_notes == 'true' && steps.patch_notes.outputs.exists == 'true'
      run: |
        DECODED_CONTENT=$(echo "${{ steps.patch_notes.outputs.content_base64 }}" | base64 -d)
        # Use a different approach for multiline content
        echo "content<<NOTES_END" >> $GITHUB_OUTPUT
        echo "$DECODED_CONTENT" >> $GITHUB_OUTPUT
        echo "NOTES_END" >> $GITHUB_OUTPUT
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: apk-${{ steps.version.outputs.tag }}
        path: app/build/app/outputs/flutter-apk/app-release.apk
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        body: |
          **Version:** ${{ steps.version.outputs.tag }}
          **Build Date:** ${{ steps.build_date.outputs.date }}
          **Commit:** ${{ github.sha }}
          
          ${{ steps.patch_notes.outputs.exists == 'true' && steps.decoded_notes.outputs.content || '## Changes\nBuilt from latest commit.' }}
        files: |
          app/build/app/outputs/flutter-apk/app-release.apk
        draft: false
        prerelease: false
